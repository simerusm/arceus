syntax = "proto3";

package device;

// Service definition for device server
service DeviceService {
  // Initialize device with layer configurations
  rpc Initialize(InitRequest) returns (InitResponse);
  
  // Forward pass through device layers
  rpc Forward(ForwardRequest) returns (ForwardResponse);
  
  // Backward pass through device layers
  rpc Backward(BackwardRequest) returns (BackwardResponse);
  
  // Update layer parameters
  rpc Update(UpdateRequest) returns (UpdateResponse);
  
  // Health check/ping
  rpc Ping(PingRequest) returns (PingResponse);
  
  // Get teraflops data
  rpc GetTeraflops(TeraflopsRequest) returns (TeraflopsResponse);
}

// Layer configuration
message LayerConfig {
  int32 input_size = 1;
  int32 output_size = 2;
  string activation = 3;
}

// Initialize request with layer configurations
message InitRequest {
  repeated LayerConfig layer_configs = 1;
  int32 device_id = 2;
}

message InitResponse {
  string status = 1;
  int32 device_id = 2;
}

// Forward pass request/response
message ForwardRequest {
  bytes input_data = 1;  // Serialized numpy array
  repeated int32 input_shape = 2;
}

message ForwardResponse {
  bytes output_data = 1;  // Serialized numpy array
  repeated int32 output_shape = 2;
}

// Backward pass request/response
message BackwardRequest {
  bytes grad_data = 1;  // Serialized numpy array
  repeated int32 grad_shape = 2;
}

message BackwardResponse {
  bytes grad_output_data = 1;  // Serialized numpy array
  repeated int32 grad_shape = 2;
}

// Parameter update request/response
message UpdateRequest {
  float learning_rate = 1;
}

message UpdateResponse {
  string status = 1;
}

// Health check/ping messages
message PingRequest {}

message PingResponse {
  string status = 1;
}

// Teraflops request/response
message TeraflopsRequest {
  int32 device_id = 1;
}

message TeraflopsResponse {
  float forward_tflops = 1;
  float backward_tflops = 2;
} 