# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from protos import device_service_pb2 as protos_dot_device__service__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in protos/device_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DeviceServiceStub(object):
    """Service definition for device server
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Initialize = channel.unary_unary(
                '/device.DeviceService/Initialize',
                request_serializer=protos_dot_device__service__pb2.InitRequest.SerializeToString,
                response_deserializer=protos_dot_device__service__pb2.InitResponse.FromString,
                _registered_method=True)
        self.Forward = channel.unary_unary(
                '/device.DeviceService/Forward',
                request_serializer=protos_dot_device__service__pb2.ForwardRequest.SerializeToString,
                response_deserializer=protos_dot_device__service__pb2.ForwardResponse.FromString,
                _registered_method=True)
        self.Backward = channel.unary_unary(
                '/device.DeviceService/Backward',
                request_serializer=protos_dot_device__service__pb2.BackwardRequest.SerializeToString,
                response_deserializer=protos_dot_device__service__pb2.BackwardResponse.FromString,
                _registered_method=True)
        self.Update = channel.unary_unary(
                '/device.DeviceService/Update',
                request_serializer=protos_dot_device__service__pb2.UpdateRequest.SerializeToString,
                response_deserializer=protos_dot_device__service__pb2.UpdateResponse.FromString,
                _registered_method=True)
        self.Ping = channel.unary_unary(
                '/device.DeviceService/Ping',
                request_serializer=protos_dot_device__service__pb2.PingRequest.SerializeToString,
                response_deserializer=protos_dot_device__service__pb2.PingResponse.FromString,
                _registered_method=True)
        self.GetTeraflops = channel.unary_unary(
                '/device.DeviceService/GetTeraflops',
                request_serializer=protos_dot_device__service__pb2.TeraflopsRequest.SerializeToString,
                response_deserializer=protos_dot_device__service__pb2.TeraflopsResponse.FromString,
                _registered_method=True)


class DeviceServiceServicer(object):
    """Service definition for device server
    """

    def Initialize(self, request, context):
        """Initialize device with layer configurations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Forward(self, request, context):
        """Forward pass through device layers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Backward(self, request, context):
        """Backward pass through device layers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Update layer parameters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Health check/ping
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTeraflops(self, request, context):
        """Get teraflops data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DeviceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Initialize': grpc.unary_unary_rpc_method_handler(
                    servicer.Initialize,
                    request_deserializer=protos_dot_device__service__pb2.InitRequest.FromString,
                    response_serializer=protos_dot_device__service__pb2.InitResponse.SerializeToString,
            ),
            'Forward': grpc.unary_unary_rpc_method_handler(
                    servicer.Forward,
                    request_deserializer=protos_dot_device__service__pb2.ForwardRequest.FromString,
                    response_serializer=protos_dot_device__service__pb2.ForwardResponse.SerializeToString,
            ),
            'Backward': grpc.unary_unary_rpc_method_handler(
                    servicer.Backward,
                    request_deserializer=protos_dot_device__service__pb2.BackwardRequest.FromString,
                    response_serializer=protos_dot_device__service__pb2.BackwardResponse.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=protos_dot_device__service__pb2.UpdateRequest.FromString,
                    response_serializer=protos_dot_device__service__pb2.UpdateResponse.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=protos_dot_device__service__pb2.PingRequest.FromString,
                    response_serializer=protos_dot_device__service__pb2.PingResponse.SerializeToString,
            ),
            'GetTeraflops': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTeraflops,
                    request_deserializer=protos_dot_device__service__pb2.TeraflopsRequest.FromString,
                    response_serializer=protos_dot_device__service__pb2.TeraflopsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'device.DeviceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('device.DeviceService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DeviceService(object):
    """Service definition for device server
    """

    @staticmethod
    def Initialize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/device.DeviceService/Initialize',
            protos_dot_device__service__pb2.InitRequest.SerializeToString,
            protos_dot_device__service__pb2.InitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Forward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/device.DeviceService/Forward',
            protos_dot_device__service__pb2.ForwardRequest.SerializeToString,
            protos_dot_device__service__pb2.ForwardResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Backward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/device.DeviceService/Backward',
            protos_dot_device__service__pb2.BackwardRequest.SerializeToString,
            protos_dot_device__service__pb2.BackwardResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/device.DeviceService/Update',
            protos_dot_device__service__pb2.UpdateRequest.SerializeToString,
            protos_dot_device__service__pb2.UpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/device.DeviceService/Ping',
            protos_dot_device__service__pb2.PingRequest.SerializeToString,
            protos_dot_device__service__pb2.PingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTeraflops(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/device.DeviceService/GetTeraflops',
            protos_dot_device__service__pb2.TeraflopsRequest.SerializeToString,
            protos_dot_device__service__pb2.TeraflopsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
